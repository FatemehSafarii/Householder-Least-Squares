# -*- coding: utf-8 -*-
"""Solving a linear equation with QR decomposition.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NHlFc1wW_FiR8ZpkewevJ4e3hxfZcVkU
"""

#Solving a linear equation with QR decomposition
import numpy as np

def qr_decomposition(A, threshold=1e-10):
    m, n = A.shape
    Q = np.eye(m)
    R = A.astype(float).copy()

    for j in range(n):
        x = R[j:, j]
        e = np.zeros_like(x)
        e[0] = np.sign(x[0] or 1)

        u = x + np.linalg.norm(x) * e
        u /= np.linalg.norm(u)

        R[j:, :] -= 2.0 * np.outer(u, u @ R[j:, :])

        # Set very small values in R to zero
        R[np.abs(R) < threshold] = 0.0

        Q[:, j:] -= 2.0 * Q[:, j:] @ np.outer(u, u)

    # Set very small values in Q to zero
    Q[np.abs(Q) < threshold] = 0.0

    return Q, R

def qr_solve(A, b):
    Q, R = qr_decomposition(A)
    n = R.shape[1]

    # Solve for x using the least squares method
    x = np.linalg.inv(R[:n, :]) @ Q.T[:n, :] @ b[:n]

    return x

# Example system of linear equations
A = np.array([[2, 3, 1], [5, 1, 2], [2, 8, 1]])
b = np.array([6, 8, 11])

solution = qr_solve(A, b)
print("Solution:")
print(solution)